//import {encode} from '/node_modules/html-entities';
//import {he} from '/node_modules/he';
//import he from '/he';

const BASE_URL = "https://opentdb.com/api.php";
const main = document.getElementById('container');
const form = document.querySelector('#new-trivia');

console.log(BASE_URL)
form.addEventListener("submit", (event) => {
    event.preventDefault();
    //const { id } = event.target;
  
    const amount = document.querySelector('#trivia-amount').value;
    const category = document.querySelector('#trivia-category').value;
    let paremeters = '';
    
    if(amount !== ''){
        paremeters = '?amount='+amount;
    }
    if(category !== ''){
        paremeters += '&category='+category;
    }
    console.log(paremeters)
    getCards(paremeters)
    
    // .catch((error) => {
    //     // You can do what you like with the error here.
    //     console.log(error);
    // });
})

function getCards(param) {
    //const uri = encodeURI(`${BASE_URL}${param}`); 
    //let encoded = encodeURI(uri);
    let decoded = decodeURI(`${BASE_URL}${param}`);
    fetch(`${BASE_URL}${param}`)
    // .then((response) => response.json())
    // .then(result => {
    //     console.log(result)
    //     fetch(BASE_URL)
        .then((response) => response.json())
        .then((json) => {
            // You can do what you like with the result here.
            console.log(json);
            
            for(let res of json.results){
                const article  = document.createElement('article'),
                    title    = document.createElement('h2'),
                    question = document.createElement('p'),
                    answer   = document.createElement('p'),
                    button   = document.createElement('button');
                article.classList.add('card');
                title.textContent = res.category;
                let q = htmlentities.encode(res.question);
                //question.textContent = htmlentities.decode(q);
                //question.textContent = decodeEntities(res.question);
                question.textContent = he.decode(res.question);
                answer.innerText = 'CORRECT ANSWER';
                answer.classList.add('hidden');
                button.innerText = 'Show Answer',

                article.appendChild(title)
                article.appendChild(question)
                article.appendChild(button)
                article.appendChild(answer)

                main.append(article)
            }
    
    })
    .catch((error) => {
        // const message = createErrorMessage(error);
        // document.querySelector("main").append(message);
    });
}

function decodeEntities(encodedString) {
    let translate_re = /&(nbsp|amp|quot|lt|gt);/g, // Creates a regular expression pattern
        translate = { // Creates an object where its entries are all the special characters
        "nbsp":" ",
        "amp" : "&",
        "quot": "\"",
        "lt"  : "<",
        "gt"  : ">"
    };
    return encodedString.replace(translate_re, function(match, entity) { //first evalautes the HTML entities that contain the input string and replace them  
        return translate[entity];
    })
    .replace(/&#(\d+);/gi, function(match, numStr) { //then, the regex evalutes if there uncoded characters and returns the new decoded string 
        let num = parseInt(numStr, 10); //
        return String.fromCharCode(num); //String.fromCharCode is a method that returns a string generated by a sequence.
    });
}

(function(window){
	window.htmlentities = {
		/**
		 * Converts a string to its html characters completely.
		 *
		 * @param {String} str String with unescaped HTML characters
		 **/
		encode : function(str) {
			var buf = [];
			
			for (var i=str.length-1;i>=0;i--) {
				buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));
			}
			
			return buf.join('');
		},
		/**
		 * Converts an html characterSet into its original character.
		 *
		 * @param {String} str htmlSet entities
		 **/
		decode : function(str) {
			return str.replace(/&#(\d+);/g, function(match, dec) {
				return String.fromCharCode(dec);
			});
		}
	};
})(window);